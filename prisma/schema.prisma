datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Users {
    id             String          @id @default(auto()) @map("_id") @db.ObjectId
    user_type      UserTypes       @default(Client)
    name           String
    cpf            String          @unique
    phone          String          @unique
    email          String          @unique
    password       String
    reset_token    String?
    avatar_image   AvatarImages?
    selected_items SelectedItems[]
    deliveries     Deliveries[]
    created_at     DateTime        @default(now())
    updated_at     DateTime        @updatedAt
}

model Transporters {
    id                String        @id @default(auto()) @map("_id") @db.ObjectId
    user_type         UserTypes     @default(Transporter)
    name              String
    phone             String        @unique
    cpf               String        @unique
    license_category  String
    transport_license Boolean
    email             String        @unique
    password          String
    vehicle           Vehicles?
    avatar_image      AvatarImages?
    deliveries        Deliveries[]
    created_at        DateTime      @default(now())
    updated_at        DateTime      @updatedAt
}

model Vehicles {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    active        Boolean      @default(true)
    owner_name    String
    owner_cpf     String
    brand         String
    model         String
    capacity      String?
    year          String
    color         String?
    fuel          String?
    license_plate String       @unique
    renavam       String       @unique
    chassi        String       @unique
    transporter   Transporters @relation(fields: [transporterId], references: [id], onDelete: Cascade)
    transporterId String       @unique @db.ObjectId
    created_at    DateTime     @default(now())
    updated_at    DateTime     @updatedAt
}

model Deliveries {
    id              String        @id @default(auto()) @map("_id") @db.ObjectId
    status          StatusTypes   @default(Waiting)
    origin          String
    origin_desc     String
    destine         String
    destine_desc    String
    distance        String
    userId          String        @db.ObjectId
    user            Users         @relation(fields: [userId], references: [id])
    transporterId   String?       @db.ObjectId
    transporter     Transporters? @relation(fields: [transporterId], references: [id])
    selectedItemsId String        @unique @db.ObjectId
    selectedItems   SelectedItems @relation(fields: [selectedItemsId], references: [id], onDelete: Cascade)
    created_at      DateTime      @default(now())
    updated_at      DateTime      @updatedAt
}

model Items {
    id         String           @id @default(auto()) @map("_id") @db.ObjectId
    title      String           @unique
    price      Float
    image      FurnitureImages?
    created_at DateTime         @default(now())
    updated_at DateTime         @updatedAt
}

model SelectedItems {
    id             String      @id @default(auto()) @map("_id") @db.ObjectId
    status         StatusTypes
    items          ItemsType[]
    items_amount   Int
    items_price    Float
    delivery_price Float
    userId         String      @db.ObjectId
    user           Users       @relation(fields: [userId], references: [id])
    created_at     DateTime    @default(now())
    updated_at     DateTime    @updatedAt
    Deliveries     Deliveries?
}

model FurnitureImages {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    image_altname String
    image_path    String
    item          Items    @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId        String   @unique @db.ObjectId
    created_at    DateTime @default(now())
    updated_at    DateTime @updatedAt
}

model AvatarImages {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    avatar_path   String
    userId        String?       @unique @db.ObjectId
    user          Users?        @relation(fields: [userId], references: [id], onDelete: Cascade)
    transporterId String?       @unique @db.ObjectId
    transporter   Transporters? @relation(fields: [transporterId], references: [id], onDelete: Cascade)
    created_at    DateTime      @default(now())
    updated_at    DateTime      @updatedAt
}

enum StatusTypes {
    Accepted
    Selected
    InProgress
    Refused
    Waiting
    Finished
    Cancelled
}

enum UserTypes {
    Client
    Transporter
}

type ItemsType {
    id       String
    image    String
    quantity Int
    title    String
    price    Float
}
