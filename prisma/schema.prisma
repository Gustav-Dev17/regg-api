datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Users {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    cpf           String         @unique
    phone         String         @unique
    email         String         @unique
    password      String
    created_at    DateTime       @default(now())
    updated_at    DateTime       @updatedAt
    avatarImages  AvatarImages?
    SelectedItems SelectedItems?
    Deliveries    Deliveries?
}

model Transporters {
    id                String        @id @default(auto()) @map("_id") @db.ObjectId
    name              String
    phone             String        @unique
    cpf               String        @unique
    license_category  String // categoria da habiitação do transportador
    transport_license Boolean // licença do transportador para o frete ou transporte de cargas
    email             String        @unique
    password          String
    created_at        DateTime      @default(now())
    updated_at        DateTime      @updatedAt
    vehicle           Vehicles?
    avatarImages      AvatarImages?
    Deliveries        Deliveries?
}

model Vehicles {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    owner_name    String // nome do dono do véiculo
    owner_cpf     String // CPF do dono do vepiculo
    brand         String // marca do véiculo 
    model         String // modelo do véiculo 
    capacity      String? // capacidade de carga e transporte do véiculo 
    year          String // ano do véiculo 
    color         String? // cor predominante do veículo
    fuel          String? // combustível  usado
    license_plate String       @unique // n. da placa
    renavam       String       @unique // renavam
    chassi        String       @unique // chassi
    transporter   Transporters @relation(fields: [transporterId], references: [id]) //relacionamento 1-to-1 com Transporter
    transporterId String       @unique @db.ObjectId //id do Transporter
}

model Deliveries {
    id               String         @id @default(auto()) @map("_id") @db.ObjectId
    status           StatusTypes //Accepted InProgress Refused Waiting Finished
    selectedItems    SelectedItems?
    origin           String //coordenadas da origem
    originDesc       String //endereço ou nome do local
    destine          String //coordenadas do destino
    destineDesc      String //endereço ou nome do local
    userId           String         @unique @db.ObjectId
    user             Users          @relation(fields: [userId], references: [id])
    transporterId    String?        @unique @db.ObjectId
    transporter      Transporters?  @relation(fields: [transporterId], references: [id])
    created_at       DateTime       @default(now())
}

model Items {
    id    String           @id @default(auto()) @map("_id") @db.ObjectId
    image FurnitureImages?
    name  String           @unique
    value Float
}

model SelectedItems {
    id             String      @id @default(auto()) @map("_id") @db.ObjectId
    status         StatusTypes //Accepted InProgress Refused Waiting Finished
    amount         Int
    value          Float
    delivery_price Float
    userId         String      @unique @db.ObjectId
    user           Users       @relation(fields: [userId], references: [id])
    deliveryId     String?     @unique @db.ObjectId
    delivery       Deliveries? @relation(fields: [deliveryId], references: [id])
}

model FurnitureImages {
    id            String @id @default(auto()) @map("_id") @db.ObjectId
    image_altname String // nome alternativo da imagem no sistema
    image_path    String // endereço da imagem no sistema
    item          Items  @relation(fields: [itemId], references: [id])
    itemId        String @unique @db.ObjectId //id do Transporter
}

model AvatarImages {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    avatar_path   String
    userId        String?       @unique @db.ObjectId
    user          Users?        @relation(fields: [userId], references: [id])
    transporterId String?       @unique @db.ObjectId
    transporter   Transporters? @relation(fields: [transporterId], references: [id])
}

enum StatusTypes {
    Accepted
    InProgress
    Refused
    Waiting
    Finished
}
