datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Users {
    id             String         @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    cpf            String         @unique
    phone          String         @unique
    email          String         @unique
    password       String
    //relacionamentos
    avatar_image   AvatarImages?
    selected_items SelectedItems?
    deliveries     Deliveries?
    //criado e ou atualizado em
    created_at     DateTime       @default(now())
    updated_at     DateTime       @updatedAt
}

model Transporters {
    id                String        @id @default(auto()) @map("_id") @db.ObjectId
    name              String
    phone             String        @unique
    cpf               String        @unique
    license_category  String
    transport_license Boolean
    email             String        @unique
    password          String
    //relacionamentos
    vehicle           Vehicles?
    avatar_image      AvatarImages?
    deliveries        Deliveries?
    //criado e ou atualizado em
    created_at        DateTime      @default(now())
    updated_at        DateTime      @updatedAt
}

model Vehicles {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    owner_name    String
    owner_cpf     String
    brand         String
    model         String
    capacity      String?
    year          String
    color         String?
    fuel          String?
    license_plate String       @unique
    renavam       String       @unique
    chassi        String       @unique
    //relacionamentos
    transporter   Transporters @relation(fields: [transporterId], references: [id], onDelete: Cascade)
    transporterId String       @unique @db.ObjectId
    //criado e ou atualizado em
    created_at    DateTime     @default(now())
    updated_at    DateTime     @updatedAt
}

model Deliveries {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    status        StatusTypes //Accepted InProgress Refused Waiting Finished
    selectedItems SelectedItems?
    origin        String
    origin_desc   String
    destine       String
    destine_desc  String
    //relacionamentos
    userId        String         @unique @db.ObjectId
    user          Users          @relation(fields: [userId], references: [id])
    transporterId String?        @unique @db.ObjectId
    transporter   Transporters?  @relation(fields: [transporterId], references: [id])
    //criado e ou atualizado em
    created_at    DateTime       @default(now())
    updated_at    DateTime       @updatedAt
}

model Items {
    id         String           @id @default(auto()) @map("_id") @db.ObjectId
    name       String           @unique
    price      Float
    //relacionamentos
    image      FurnitureImages?
    //criado e ou atualizado em
    created_at DateTime         @default(now())
    updated_at DateTime         @updatedAt
}

model SelectedItems {
    id             String      @id @default(auto()) @map("_id") @db.ObjectId
    status         StatusTypes
    items_amount   Int
    items_price    Float
    delivery_price Float
    //relacionamentos
    userId         String      @unique @db.ObjectId
    user           Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
    deliveryId     String?     @unique @db.ObjectId
    delivery       Deliveries? @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
    //criado e ou atualizado em
    created_at     DateTime    @default(now())
    updated_at     DateTime    @updatedAt
}

model FurnitureImages {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    image_altname String
    image_path    String
    //relacionamentos
    item          Items    @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId        String   @unique @db.ObjectId
    //criado e ou atualizado em
    created_at    DateTime @default(now())
    updated_at    DateTime @updatedAt
}

model AvatarImages {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    avatar_path   String
    //relacionamentos
    userId        String?       @unique @db.ObjectId
    user          Users?        @relation(fields: [userId], references: [id], onDelete: Cascade)
    transporterId String?       @unique @db.ObjectId
    transporter   Transporters? @relation(fields: [transporterId], references: [id], onDelete: Cascade)
    //criado e ou atualizado em
    created_at    DateTime      @default(now())
    updated_at    DateTime      @updatedAt
}

enum StatusTypes {
    Accepted
    InProgress
    Refused
    Waiting
    Finished
}
