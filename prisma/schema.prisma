datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Users {
    id             String          @id @default(auto()) @map("_id") @db.ObjectId
    user_type      UserTypes       @default(Client)
    name           String
    cpf            String          @unique
    phone          String          @unique
    email          String          @unique
    password       String
    reset_token    String?
    avatar_url     String?
    selected_items SelectedItems[]
    deliveries     Deliveries[]
    created_at     DateTime        @default(now())
    updated_at     DateTime        @updatedAt
    PlayersId      PlayersId[]
}

model Transporters {
    id                String       @id @default(auto()) @map("_id") @db.ObjectId
    user_type         UserTypes    @default(Transporter)
    name              String
    phone             String       @unique
    cpf               String       @unique
    license_category  String?
    transport_license Boolean?
    email             String       @unique
    password          String
    vehicle           Vehicles?
    avatar_url        String?
    deliveries        Deliveries[]
    created_at        DateTime     @default(now())
    updated_at        DateTime     @updatedAt
    PlayersId         PlayersId[]
}

model Vehicles {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    active        Boolean      @default(true)
    owner_name    String
    owner_cpf     String
    brand         String
    model         String
    capacity      String?
    type          VehicleTypes
    year          String
    color         String?
    fuel          String?
    license_plate String       @unique
    renavam       String       @unique
    chassi        String       @unique
    transporter   Transporters @relation(fields: [transporterId], references: [id], onDelete: Cascade)
    transporterId String       @unique @db.ObjectId
    created_at    DateTime     @default(now())
    updated_at    DateTime     @updatedAt
}

model Deliveries {
    id              String        @id @default(auto()) @map("_id") @db.ObjectId
    status          StatusTypes   @default(Waiting)
    origin          String
    origin_desc     String
    destine         String
    destine_desc    String
    distance        String
    isPaid          Boolean?
    needsHelper     Boolean       @default(false)
    paymentId       String?
    userId          String        @db.ObjectId
    user            Users         @relation(fields: [userId], references: [id])
    transporterId   String?       @db.ObjectId
    transporter     Transporters? @relation(fields: [transporterId], references: [id])
    selectedItemsId String        @unique @db.ObjectId
    selectedItems   SelectedItems @relation(fields: [selectedItemsId], references: [id], onDelete: Cascade)
    created_at      DateTime      @default(now())
    updated_at      DateTime      @updatedAt
}

model Items {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    title      String   @unique
    price      Float
    image      String?
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model SelectedItems {
    id             String      @id @default(auto()) @map("_id") @db.ObjectId
    status         StatusTypes
    items          ItemsType[]
    items_amount   Int
    items_price    Float
    delivery_price Float
    userId         String      @db.ObjectId
    user           Users       @relation(fields: [userId], references: [id])
    created_at     DateTime    @default(now())
    updated_at     DateTime    @updatedAt
    Deliveries     Deliveries?
}

model PlayersId {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    ids           String[]
    User          Users?        @relation(fields: [userId], references: [id])
    userId        String?       @db.ObjectId
    Transporter   Transporters? @relation(fields: [transporterId], references: [id])
    transporterId String?       @db.ObjectId
}

enum StatusTypes {
    Accepted
    Selected
    InProgress
    Refused
    Waiting
    Finished
    Cancelled
}

enum UserTypes {
    Client
    Transporter
}

enum VehicleTypes {
    Pickup
    Caminhao_Toco
    Caminhao_Truck
    Carreta_5Eixos
    Carreta_Eixo_Estendido
}

type ItemsType {
    id       String
    image    String
    quantity Int
    title    String
    price    Float
}
